#recursive approach

def addOne(head: Node) -> Node:
    # write your code here
    if head is None:
        return Node(1)
    carry = helper(head)
    if carry==1:
        node = Node(1)
        node.next = head
        head = node
    return head
    pass

def helper(temp):
    if temp==None:
        return 1
    carry=helper(temp.next)
    temp.data+=carry
    if temp.data<10:
        return 0
    else:
        temp.data = 0
        return 1
        


#brute reversal approach
class Solution:
    def reverse(self, head):
        curr = head
        prev = None
        while curr:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        return prev
            
    def addOne(self,head):
        #Returns new head of linked List.
        if head is None:
            return None
        
        head = self.reverse(head)
        carry = 1
        temp = head
        while temp:
            temp.data+=carry
            if temp.data<10:
                carry = 0
                break
            else:
                carry = 1
                temp.data=0
            temp = temp.next
        head = self.reverse(head)
        if carry==1:
            node = Node(1)
            node.next = head
            return node
        return head
            

