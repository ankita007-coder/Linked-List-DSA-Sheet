#Using extra space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        slow=fast=head
        s = set()
        while fast.next and fast.next.next:
            s.add(slow) 
            slow = slow.next
            fast = fast.next.next
            print(slow.val,fast.val)
            if slow in s:
                return slow
            
        return None


#Using O(1) space complexity
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        slow=fast=entry=head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
            if fast ==slow:
                while slow!=entry:
                    slow = slow.next
                    entry = entry.next
                return slow
            
        return None
